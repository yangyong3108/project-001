// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commonprotocol.proto

#ifndef PROTOBUF_commonprotocol_2eproto__INCLUDED
#define PROTOBUF_commonprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace card_protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_commonprotocol_2eproto();
void protobuf_AssignDesc_commonprotocol_2eproto();
void protobuf_ShutdownFile_commonprotocol_2eproto();

class TopMessage;
class Data;
class Pipeline;

enum MessageType {
  REQUEST = 0,
  RESPONSE = 1,
  PUSH = 2
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = REQUEST;
const MessageType MessageType_MAX = PUSH;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum SubMessageType {
  INIT = 0,
  OPTION = 1,
  LOGIN = 2,
  POST = 3,
  SET_PARAMETER = 4,
  UPDATE = 5,
  REGISTER = 6,
  PAUSE = 7,
  CANCEL = 8,
  RESET = 9,
  LOGOFF = 10,
  REG_WD = 11,
  CHAT = 12,
  MARKET = 13,
  NOTIFY = 14
};
bool SubMessageType_IsValid(int value);
const SubMessageType SubMessageType_MIN = INIT;
const SubMessageType SubMessageType_MAX = NOTIFY;
const int SubMessageType_ARRAYSIZE = SubMessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SubMessageType_descriptor();
inline const ::std::string& SubMessageType_Name(SubMessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SubMessageType_descriptor(), value);
}
inline bool SubMessageType_Parse(
    const ::std::string& name, SubMessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SubMessageType>(
    SubMessageType_descriptor(), name, value);
}
enum DataType {
  JSON = 0,
  BINARY = 1,
  MULTI_BINARY = 2,
  FIX = 3,
  HTML = 4,
  MULTI_BINARY_NAME = 5,
  PROTOBUF = 6,
  STRING = 7,
  DYNA = 8,
  KLINE = 9,
  MIN = 10
};
bool DataType_IsValid(int value);
const DataType DataType_MIN = JSON;
const DataType DataType_MAX = MIN;
const int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataType_descriptor();
inline const ::std::string& DataType_Name(DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataType_descriptor(), value);
}
inline bool DataType_Parse(
    const ::std::string& name, DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
enum OrignalSource {
  TERMINAL = 0,
  WEB = 1,
  ANDRIOD_MOBILE = 2,
  IOS_MOBILE = 3,
  ANDRIOD_PAD = 4,
  IOS_PAD = 5,
  BLACKBERRY = 6,
  WIN_MOBILE = 7,
  WIN_PAD = 8
};
bool OrignalSource_IsValid(int value);
const OrignalSource OrignalSource_MIN = TERMINAL;
const OrignalSource OrignalSource_MAX = WIN_PAD;
const int OrignalSource_ARRAYSIZE = OrignalSource_MAX + 1;

const ::google::protobuf::EnumDescriptor* OrignalSource_descriptor();
inline const ::std::string& OrignalSource_Name(OrignalSource value) {
  return ::google::protobuf::internal::NameOfEnum(
    OrignalSource_descriptor(), value);
}
inline bool OrignalSource_Parse(
    const ::std::string& name, OrignalSource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OrignalSource>(
    OrignalSource_descriptor(), name, value);
}
// ===================================================================

class TopMessage : public ::google::protobuf::Message {
 public:
  TopMessage();
  virtual ~TopMessage();

  TopMessage(const TopMessage& from);

  inline TopMessage& operator=(const TopMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopMessage& default_instance();

  void Swap(TopMessage* other);

  // implements Message ----------------------------------------------

  TopMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopMessage& from);
  void MergeFrom(const TopMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string protocol_version = 1;
  inline bool has_protocol_version() const;
  inline void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 1;
  inline const ::std::string& protocol_version() const;
  inline void set_protocol_version(const ::std::string& value);
  inline void set_protocol_version(const char* value);
  inline void set_protocol_version(const char* value, size_t size);
  inline ::std::string* mutable_protocol_version();
  inline ::std::string* release_protocol_version();
  inline void set_allocated_protocol_version(::std::string* protocol_version);

  // optional .card_protobuf.MessageType msg_type = 2;
  inline bool has_msg_type() const;
  inline void clear_msg_type();
  static const int kMsgTypeFieldNumber = 2;
  inline ::card_protobuf::MessageType msg_type() const;
  inline void set_msg_type(::card_protobuf::MessageType value);

  // optional .card_protobuf.SubMessageType sub_msg_type = 3;
  inline bool has_sub_msg_type() const;
  inline void clear_sub_msg_type();
  static const int kSubMsgTypeFieldNumber = 3;
  inline ::card_protobuf::SubMessageType sub_msg_type() const;
  inline void set_sub_msg_type(::card_protobuf::SubMessageType value);

  // optional string session_id = 4;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 4;
  inline const ::std::string& session_id() const;
  inline void set_session_id(const ::std::string& value);
  inline void set_session_id(const char* value);
  inline void set_session_id(const char* value, size_t size);
  inline ::std::string* mutable_session_id();
  inline ::std::string* release_session_id();
  inline void set_allocated_session_id(::std::string* session_id);

  // optional int64 seq = 5;
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 5;
  inline ::google::protobuf::int64 seq() const;
  inline void set_seq(::google::protobuf::int64 value);

  // optional string radom = 6;
  inline bool has_radom() const;
  inline void clear_radom();
  static const int kRadomFieldNumber = 6;
  inline const ::std::string& radom() const;
  inline void set_radom(const ::std::string& value);
  inline void set_radom(const char* value);
  inline void set_radom(const char* value, size_t size);
  inline ::std::string* mutable_radom();
  inline ::std::string* release_radom();
  inline void set_allocated_radom(::std::string* radom);

  // optional .card_protobuf.Pipeline pipeline = 7;
  inline bool has_pipeline() const;
  inline void clear_pipeline();
  static const int kPipelineFieldNumber = 7;
  inline const ::card_protobuf::Pipeline& pipeline() const;
  inline ::card_protobuf::Pipeline* mutable_pipeline();
  inline ::card_protobuf::Pipeline* release_pipeline();
  inline void set_allocated_pipeline(::card_protobuf::Pipeline* pipeline);

  // optional bytes data = 8;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 8;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional string host = 9;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 9;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  inline void set_allocated_host(::std::string* host);

  // optional .card_protobuf.OrignalSource source = 10;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 10;
  inline ::card_protobuf::OrignalSource source() const;
  inline void set_source(::card_protobuf::OrignalSource value);

  // optional string user_name = 11;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 11;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional int32 product_id = 12;
  inline bool has_product_id() const;
  inline void clear_product_id();
  static const int kProductIdFieldNumber = 12;
  inline ::google::protobuf::int32 product_id() const;
  inline void set_product_id(::google::protobuf::int32 value);

  // optional float version = 13;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 13;
  inline float version() const;
  inline void set_version(float value);

  // optional int64 timeout = 14;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 14;
  inline ::google::protobuf::int64 timeout() const;
  inline void set_timeout(::google::protobuf::int64 value);

  // optional int64 timestamp = 15;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 15;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:card_protobuf.TopMessage)
 private:
  inline void set_has_protocol_version();
  inline void clear_has_protocol_version();
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_sub_msg_type();
  inline void clear_has_sub_msg_type();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_seq();
  inline void clear_has_seq();
  inline void set_has_radom();
  inline void clear_has_radom();
  inline void set_has_pipeline();
  inline void clear_has_pipeline();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_product_id();
  inline void clear_has_product_id();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_timeout();
  inline void clear_has_timeout();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* protocol_version_;
  int msg_type_;
  int sub_msg_type_;
  ::std::string* session_id_;
  ::google::protobuf::int64 seq_;
  ::std::string* radom_;
  ::card_protobuf::Pipeline* pipeline_;
  ::std::string* data_;
  ::std::string* host_;
  ::std::string* user_name_;
  int source_;
  ::google::protobuf::int32 product_id_;
  ::google::protobuf::int64 timeout_;
  ::google::protobuf::int64 timestamp_;
  float version_;
  friend void  protobuf_AddDesc_commonprotocol_2eproto();
  friend void protobuf_AssignDesc_commonprotocol_2eproto();
  friend void protobuf_ShutdownFile_commonprotocol_2eproto();

  void InitAsDefaultInstance();
  static TopMessage* default_instance_;
};
// -------------------------------------------------------------------

class Data : public ::google::protobuf::Message {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Data& default_instance();

  void Swap(Data* other);

  // implements Message ----------------------------------------------

  Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string protocol_version = 1;
  inline bool has_protocol_version() const;
  inline void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 1;
  inline const ::std::string& protocol_version() const;
  inline void set_protocol_version(const ::std::string& value);
  inline void set_protocol_version(const char* value);
  inline void set_protocol_version(const char* value, size_t size);
  inline ::std::string* mutable_protocol_version();
  inline ::std::string* release_protocol_version();
  inline void set_allocated_protocol_version(::std::string* protocol_version);

  // required .card_protobuf.DataType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::card_protobuf::DataType type() const;
  inline void set_type(::card_protobuf::DataType value);

  // required bytes value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional int64 length = 4;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 4;
  inline ::google::protobuf::int64 length() const;
  inline void set_length(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:card_protobuf.Data)
 private:
  inline void set_has_protocol_version();
  inline void clear_has_protocol_version();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_length();
  inline void clear_has_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* protocol_version_;
  ::std::string* value_;
  ::google::protobuf::int64 length_;
  int type_;
  friend void  protobuf_AddDesc_commonprotocol_2eproto();
  friend void protobuf_AssignDesc_commonprotocol_2eproto();
  friend void protobuf_ShutdownFile_commonprotocol_2eproto();

  void InitAsDefaultInstance();
  static Data* default_instance_;
};
// -------------------------------------------------------------------

class Pipeline : public ::google::protobuf::Message {
 public:
  Pipeline();
  virtual ~Pipeline();

  Pipeline(const Pipeline& from);

  inline Pipeline& operator=(const Pipeline& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pipeline& default_instance();

  void Swap(Pipeline* other);

  // implements Message ----------------------------------------------

  Pipeline* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pipeline& from);
  void MergeFrom(const Pipeline& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string pipe_index = 1;
  inline bool has_pipe_index() const;
  inline void clear_pipe_index();
  static const int kPipeIndexFieldNumber = 1;
  inline const ::std::string& pipe_index() const;
  inline void set_pipe_index(const ::std::string& value);
  inline void set_pipe_index(const char* value);
  inline void set_pipe_index(const char* value, size_t size);
  inline ::std::string* mutable_pipe_index();
  inline ::std::string* release_pipe_index();
  inline void set_allocated_pipe_index(::std::string* pipe_index);

  // optional bool end_flag = 2;
  inline bool has_end_flag() const;
  inline void clear_end_flag();
  static const int kEndFlagFieldNumber = 2;
  inline bool end_flag() const;
  inline void set_end_flag(bool value);

  // @@protoc_insertion_point(class_scope:card_protobuf.Pipeline)
 private:
  inline void set_has_pipe_index();
  inline void clear_has_pipe_index();
  inline void set_has_end_flag();
  inline void clear_has_end_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* pipe_index_;
  bool end_flag_;
  friend void  protobuf_AddDesc_commonprotocol_2eproto();
  friend void protobuf_AssignDesc_commonprotocol_2eproto();
  friend void protobuf_ShutdownFile_commonprotocol_2eproto();

  void InitAsDefaultInstance();
  static Pipeline* default_instance_;
};
// ===================================================================


// ===================================================================

// TopMessage

// optional string protocol_version = 1;
inline bool TopMessage::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopMessage::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopMessage::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopMessage::clear_protocol_version() {
  if (protocol_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    protocol_version_->clear();
  }
  clear_has_protocol_version();
}
inline const ::std::string& TopMessage::protocol_version() const {
  // @@protoc_insertion_point(field_get:card_protobuf.TopMessage.protocol_version)
  return *protocol_version_;
}
inline void TopMessage::set_protocol_version(const ::std::string& value) {
  set_has_protocol_version();
  if (protocol_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    protocol_version_ = new ::std::string;
  }
  protocol_version_->assign(value);
  // @@protoc_insertion_point(field_set:card_protobuf.TopMessage.protocol_version)
}
inline void TopMessage::set_protocol_version(const char* value) {
  set_has_protocol_version();
  if (protocol_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    protocol_version_ = new ::std::string;
  }
  protocol_version_->assign(value);
  // @@protoc_insertion_point(field_set_char:card_protobuf.TopMessage.protocol_version)
}
inline void TopMessage::set_protocol_version(const char* value, size_t size) {
  set_has_protocol_version();
  if (protocol_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    protocol_version_ = new ::std::string;
  }
  protocol_version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:card_protobuf.TopMessage.protocol_version)
}
inline ::std::string* TopMessage::mutable_protocol_version() {
  set_has_protocol_version();
  if (protocol_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    protocol_version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:card_protobuf.TopMessage.protocol_version)
  return protocol_version_;
}
inline ::std::string* TopMessage::release_protocol_version() {
  clear_has_protocol_version();
  if (protocol_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = protocol_version_;
    protocol_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TopMessage::set_allocated_protocol_version(::std::string* protocol_version) {
  if (protocol_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete protocol_version_;
  }
  if (protocol_version) {
    set_has_protocol_version();
    protocol_version_ = protocol_version;
  } else {
    clear_has_protocol_version();
    protocol_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:card_protobuf.TopMessage.protocol_version)
}

// optional .card_protobuf.MessageType msg_type = 2;
inline bool TopMessage::has_msg_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TopMessage::set_has_msg_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TopMessage::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TopMessage::clear_msg_type() {
  msg_type_ = 0;
  clear_has_msg_type();
}
inline ::card_protobuf::MessageType TopMessage::msg_type() const {
  // @@protoc_insertion_point(field_get:card_protobuf.TopMessage.msg_type)
  return static_cast< ::card_protobuf::MessageType >(msg_type_);
}
inline void TopMessage::set_msg_type(::card_protobuf::MessageType value) {
  assert(::card_protobuf::MessageType_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:card_protobuf.TopMessage.msg_type)
}

// optional .card_protobuf.SubMessageType sub_msg_type = 3;
inline bool TopMessage::has_sub_msg_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TopMessage::set_has_sub_msg_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TopMessage::clear_has_sub_msg_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TopMessage::clear_sub_msg_type() {
  sub_msg_type_ = 0;
  clear_has_sub_msg_type();
}
inline ::card_protobuf::SubMessageType TopMessage::sub_msg_type() const {
  // @@protoc_insertion_point(field_get:card_protobuf.TopMessage.sub_msg_type)
  return static_cast< ::card_protobuf::SubMessageType >(sub_msg_type_);
}
inline void TopMessage::set_sub_msg_type(::card_protobuf::SubMessageType value) {
  assert(::card_protobuf::SubMessageType_IsValid(value));
  set_has_sub_msg_type();
  sub_msg_type_ = value;
  // @@protoc_insertion_point(field_set:card_protobuf.TopMessage.sub_msg_type)
}

// optional string session_id = 4;
inline bool TopMessage::has_session_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TopMessage::set_has_session_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TopMessage::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TopMessage::clear_session_id() {
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_->clear();
  }
  clear_has_session_id();
}
inline const ::std::string& TopMessage::session_id() const {
  // @@protoc_insertion_point(field_get:card_protobuf.TopMessage.session_id)
  return *session_id_;
}
inline void TopMessage::set_session_id(const ::std::string& value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
  // @@protoc_insertion_point(field_set:card_protobuf.TopMessage.session_id)
}
inline void TopMessage::set_session_id(const char* value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:card_protobuf.TopMessage.session_id)
}
inline void TopMessage::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:card_protobuf.TopMessage.session_id)
}
inline ::std::string* TopMessage::mutable_session_id() {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:card_protobuf.TopMessage.session_id)
  return session_id_;
}
inline ::std::string* TopMessage::release_session_id() {
  clear_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = session_id_;
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TopMessage::set_allocated_session_id(::std::string* session_id) {
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_id_;
  }
  if (session_id) {
    set_has_session_id();
    session_id_ = session_id;
  } else {
    clear_has_session_id();
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:card_protobuf.TopMessage.session_id)
}

// optional int64 seq = 5;
inline bool TopMessage::has_seq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TopMessage::set_has_seq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TopMessage::clear_has_seq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TopMessage::clear_seq() {
  seq_ = GOOGLE_LONGLONG(0);
  clear_has_seq();
}
inline ::google::protobuf::int64 TopMessage::seq() const {
  // @@protoc_insertion_point(field_get:card_protobuf.TopMessage.seq)
  return seq_;
}
inline void TopMessage::set_seq(::google::protobuf::int64 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:card_protobuf.TopMessage.seq)
}

// optional string radom = 6;
inline bool TopMessage::has_radom() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TopMessage::set_has_radom() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TopMessage::clear_has_radom() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TopMessage::clear_radom() {
  if (radom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radom_->clear();
  }
  clear_has_radom();
}
inline const ::std::string& TopMessage::radom() const {
  // @@protoc_insertion_point(field_get:card_protobuf.TopMessage.radom)
  return *radom_;
}
inline void TopMessage::set_radom(const ::std::string& value) {
  set_has_radom();
  if (radom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radom_ = new ::std::string;
  }
  radom_->assign(value);
  // @@protoc_insertion_point(field_set:card_protobuf.TopMessage.radom)
}
inline void TopMessage::set_radom(const char* value) {
  set_has_radom();
  if (radom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radom_ = new ::std::string;
  }
  radom_->assign(value);
  // @@protoc_insertion_point(field_set_char:card_protobuf.TopMessage.radom)
}
inline void TopMessage::set_radom(const char* value, size_t size) {
  set_has_radom();
  if (radom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radom_ = new ::std::string;
  }
  radom_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:card_protobuf.TopMessage.radom)
}
inline ::std::string* TopMessage::mutable_radom() {
  set_has_radom();
  if (radom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radom_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:card_protobuf.TopMessage.radom)
  return radom_;
}
inline ::std::string* TopMessage::release_radom() {
  clear_has_radom();
  if (radom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = radom_;
    radom_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TopMessage::set_allocated_radom(::std::string* radom) {
  if (radom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radom_;
  }
  if (radom) {
    set_has_radom();
    radom_ = radom;
  } else {
    clear_has_radom();
    radom_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:card_protobuf.TopMessage.radom)
}

// optional .card_protobuf.Pipeline pipeline = 7;
inline bool TopMessage::has_pipeline() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TopMessage::set_has_pipeline() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TopMessage::clear_has_pipeline() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TopMessage::clear_pipeline() {
  if (pipeline_ != NULL) pipeline_->::card_protobuf::Pipeline::Clear();
  clear_has_pipeline();
}
inline const ::card_protobuf::Pipeline& TopMessage::pipeline() const {
  // @@protoc_insertion_point(field_get:card_protobuf.TopMessage.pipeline)
  return pipeline_ != NULL ? *pipeline_ : *default_instance_->pipeline_;
}
inline ::card_protobuf::Pipeline* TopMessage::mutable_pipeline() {
  set_has_pipeline();
  if (pipeline_ == NULL) pipeline_ = new ::card_protobuf::Pipeline;
  // @@protoc_insertion_point(field_mutable:card_protobuf.TopMessage.pipeline)
  return pipeline_;
}
inline ::card_protobuf::Pipeline* TopMessage::release_pipeline() {
  clear_has_pipeline();
  ::card_protobuf::Pipeline* temp = pipeline_;
  pipeline_ = NULL;
  return temp;
}
inline void TopMessage::set_allocated_pipeline(::card_protobuf::Pipeline* pipeline) {
  delete pipeline_;
  pipeline_ = pipeline;
  if (pipeline) {
    set_has_pipeline();
  } else {
    clear_has_pipeline();
  }
  // @@protoc_insertion_point(field_set_allocated:card_protobuf.TopMessage.pipeline)
}

// optional bytes data = 8;
inline bool TopMessage::has_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TopMessage::set_has_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TopMessage::clear_has_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TopMessage::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& TopMessage::data() const {
  // @@protoc_insertion_point(field_get:card_protobuf.TopMessage.data)
  return *data_;
}
inline void TopMessage::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:card_protobuf.TopMessage.data)
}
inline void TopMessage::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:card_protobuf.TopMessage.data)
}
inline void TopMessage::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:card_protobuf.TopMessage.data)
}
inline ::std::string* TopMessage::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:card_protobuf.TopMessage.data)
  return data_;
}
inline ::std::string* TopMessage::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TopMessage::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:card_protobuf.TopMessage.data)
}

// optional string host = 9;
inline bool TopMessage::has_host() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TopMessage::set_has_host() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TopMessage::clear_has_host() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TopMessage::clear_host() {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& TopMessage::host() const {
  // @@protoc_insertion_point(field_get:card_protobuf.TopMessage.host)
  return *host_;
}
inline void TopMessage::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(value);
  // @@protoc_insertion_point(field_set:card_protobuf.TopMessage.host)
}
inline void TopMessage::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(value);
  // @@protoc_insertion_point(field_set_char:card_protobuf.TopMessage.host)
}
inline void TopMessage::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:card_protobuf.TopMessage.host)
}
inline ::std::string* TopMessage::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:card_protobuf.TopMessage.host)
  return host_;
}
inline ::std::string* TopMessage::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TopMessage::set_allocated_host(::std::string* host) {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_;
  }
  if (host) {
    set_has_host();
    host_ = host;
  } else {
    clear_has_host();
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:card_protobuf.TopMessage.host)
}

// optional .card_protobuf.OrignalSource source = 10;
inline bool TopMessage::has_source() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TopMessage::set_has_source() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TopMessage::clear_has_source() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TopMessage::clear_source() {
  source_ = 0;
  clear_has_source();
}
inline ::card_protobuf::OrignalSource TopMessage::source() const {
  // @@protoc_insertion_point(field_get:card_protobuf.TopMessage.source)
  return static_cast< ::card_protobuf::OrignalSource >(source_);
}
inline void TopMessage::set_source(::card_protobuf::OrignalSource value) {
  assert(::card_protobuf::OrignalSource_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:card_protobuf.TopMessage.source)
}

// optional string user_name = 11;
inline bool TopMessage::has_user_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TopMessage::set_has_user_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TopMessage::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TopMessage::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& TopMessage::user_name() const {
  // @@protoc_insertion_point(field_get:card_protobuf.TopMessage.user_name)
  return *user_name_;
}
inline void TopMessage::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set:card_protobuf.TopMessage.user_name)
}
inline void TopMessage::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:card_protobuf.TopMessage.user_name)
}
inline void TopMessage::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:card_protobuf.TopMessage.user_name)
}
inline ::std::string* TopMessage::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:card_protobuf.TopMessage.user_name)
  return user_name_;
}
inline ::std::string* TopMessage::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TopMessage::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:card_protobuf.TopMessage.user_name)
}

// optional int32 product_id = 12;
inline bool TopMessage::has_product_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TopMessage::set_has_product_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TopMessage::clear_has_product_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TopMessage::clear_product_id() {
  product_id_ = 0;
  clear_has_product_id();
}
inline ::google::protobuf::int32 TopMessage::product_id() const {
  // @@protoc_insertion_point(field_get:card_protobuf.TopMessage.product_id)
  return product_id_;
}
inline void TopMessage::set_product_id(::google::protobuf::int32 value) {
  set_has_product_id();
  product_id_ = value;
  // @@protoc_insertion_point(field_set:card_protobuf.TopMessage.product_id)
}

// optional float version = 13;
inline bool TopMessage::has_version() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TopMessage::set_has_version() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TopMessage::clear_has_version() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TopMessage::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline float TopMessage::version() const {
  // @@protoc_insertion_point(field_get:card_protobuf.TopMessage.version)
  return version_;
}
inline void TopMessage::set_version(float value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:card_protobuf.TopMessage.version)
}

// optional int64 timeout = 14;
inline bool TopMessage::has_timeout() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TopMessage::set_has_timeout() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TopMessage::clear_has_timeout() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TopMessage::clear_timeout() {
  timeout_ = GOOGLE_LONGLONG(0);
  clear_has_timeout();
}
inline ::google::protobuf::int64 TopMessage::timeout() const {
  // @@protoc_insertion_point(field_get:card_protobuf.TopMessage.timeout)
  return timeout_;
}
inline void TopMessage::set_timeout(::google::protobuf::int64 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:card_protobuf.TopMessage.timeout)
}

// optional int64 timestamp = 15;
inline bool TopMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TopMessage::set_has_timestamp() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TopMessage::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TopMessage::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 TopMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:card_protobuf.TopMessage.timestamp)
  return timestamp_;
}
inline void TopMessage::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:card_protobuf.TopMessage.timestamp)
}

// -------------------------------------------------------------------

// Data

// optional string protocol_version = 1;
inline bool Data::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Data::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Data::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Data::clear_protocol_version() {
  if (protocol_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    protocol_version_->clear();
  }
  clear_has_protocol_version();
}
inline const ::std::string& Data::protocol_version() const {
  // @@protoc_insertion_point(field_get:card_protobuf.Data.protocol_version)
  return *protocol_version_;
}
inline void Data::set_protocol_version(const ::std::string& value) {
  set_has_protocol_version();
  if (protocol_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    protocol_version_ = new ::std::string;
  }
  protocol_version_->assign(value);
  // @@protoc_insertion_point(field_set:card_protobuf.Data.protocol_version)
}
inline void Data::set_protocol_version(const char* value) {
  set_has_protocol_version();
  if (protocol_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    protocol_version_ = new ::std::string;
  }
  protocol_version_->assign(value);
  // @@protoc_insertion_point(field_set_char:card_protobuf.Data.protocol_version)
}
inline void Data::set_protocol_version(const char* value, size_t size) {
  set_has_protocol_version();
  if (protocol_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    protocol_version_ = new ::std::string;
  }
  protocol_version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:card_protobuf.Data.protocol_version)
}
inline ::std::string* Data::mutable_protocol_version() {
  set_has_protocol_version();
  if (protocol_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    protocol_version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:card_protobuf.Data.protocol_version)
  return protocol_version_;
}
inline ::std::string* Data::release_protocol_version() {
  clear_has_protocol_version();
  if (protocol_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = protocol_version_;
    protocol_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Data::set_allocated_protocol_version(::std::string* protocol_version) {
  if (protocol_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete protocol_version_;
  }
  if (protocol_version) {
    set_has_protocol_version();
    protocol_version_ = protocol_version;
  } else {
    clear_has_protocol_version();
    protocol_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:card_protobuf.Data.protocol_version)
}

// required .card_protobuf.DataType type = 2;
inline bool Data::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Data::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Data::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Data::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::card_protobuf::DataType Data::type() const {
  // @@protoc_insertion_point(field_get:card_protobuf.Data.type)
  return static_cast< ::card_protobuf::DataType >(type_);
}
inline void Data::set_type(::card_protobuf::DataType value) {
  assert(::card_protobuf::DataType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:card_protobuf.Data.type)
}

// required bytes value = 3;
inline bool Data::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Data::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Data::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Data::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Data::value() const {
  // @@protoc_insertion_point(field_get:card_protobuf.Data.value)
  return *value_;
}
inline void Data::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:card_protobuf.Data.value)
}
inline void Data::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:card_protobuf.Data.value)
}
inline void Data::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:card_protobuf.Data.value)
}
inline ::std::string* Data::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:card_protobuf.Data.value)
  return value_;
}
inline ::std::string* Data::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Data::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:card_protobuf.Data.value)
}

// optional int64 length = 4;
inline bool Data::has_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Data::set_has_length() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Data::clear_has_length() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Data::clear_length() {
  length_ = GOOGLE_LONGLONG(0);
  clear_has_length();
}
inline ::google::protobuf::int64 Data::length() const {
  // @@protoc_insertion_point(field_get:card_protobuf.Data.length)
  return length_;
}
inline void Data::set_length(::google::protobuf::int64 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:card_protobuf.Data.length)
}

// -------------------------------------------------------------------

// Pipeline

// required string pipe_index = 1;
inline bool Pipeline::has_pipe_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pipeline::set_has_pipe_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pipeline::clear_has_pipe_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pipeline::clear_pipe_index() {
  if (pipe_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pipe_index_->clear();
  }
  clear_has_pipe_index();
}
inline const ::std::string& Pipeline::pipe_index() const {
  // @@protoc_insertion_point(field_get:card_protobuf.Pipeline.pipe_index)
  return *pipe_index_;
}
inline void Pipeline::set_pipe_index(const ::std::string& value) {
  set_has_pipe_index();
  if (pipe_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pipe_index_ = new ::std::string;
  }
  pipe_index_->assign(value);
  // @@protoc_insertion_point(field_set:card_protobuf.Pipeline.pipe_index)
}
inline void Pipeline::set_pipe_index(const char* value) {
  set_has_pipe_index();
  if (pipe_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pipe_index_ = new ::std::string;
  }
  pipe_index_->assign(value);
  // @@protoc_insertion_point(field_set_char:card_protobuf.Pipeline.pipe_index)
}
inline void Pipeline::set_pipe_index(const char* value, size_t size) {
  set_has_pipe_index();
  if (pipe_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pipe_index_ = new ::std::string;
  }
  pipe_index_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:card_protobuf.Pipeline.pipe_index)
}
inline ::std::string* Pipeline::mutable_pipe_index() {
  set_has_pipe_index();
  if (pipe_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pipe_index_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:card_protobuf.Pipeline.pipe_index)
  return pipe_index_;
}
inline ::std::string* Pipeline::release_pipe_index() {
  clear_has_pipe_index();
  if (pipe_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pipe_index_;
    pipe_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Pipeline::set_allocated_pipe_index(::std::string* pipe_index) {
  if (pipe_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pipe_index_;
  }
  if (pipe_index) {
    set_has_pipe_index();
    pipe_index_ = pipe_index;
  } else {
    clear_has_pipe_index();
    pipe_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:card_protobuf.Pipeline.pipe_index)
}

// optional bool end_flag = 2;
inline bool Pipeline::has_end_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pipeline::set_has_end_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pipeline::clear_has_end_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pipeline::clear_end_flag() {
  end_flag_ = false;
  clear_has_end_flag();
}
inline bool Pipeline::end_flag() const {
  // @@protoc_insertion_point(field_get:card_protobuf.Pipeline.end_flag)
  return end_flag_;
}
inline void Pipeline::set_end_flag(bool value) {
  set_has_end_flag();
  end_flag_ = value;
  // @@protoc_insertion_point(field_set:card_protobuf.Pipeline.end_flag)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace card_protobuf

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::card_protobuf::MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::card_protobuf::MessageType>() {
  return ::card_protobuf::MessageType_descriptor();
}
template <> struct is_proto_enum< ::card_protobuf::SubMessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::card_protobuf::SubMessageType>() {
  return ::card_protobuf::SubMessageType_descriptor();
}
template <> struct is_proto_enum< ::card_protobuf::DataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::card_protobuf::DataType>() {
  return ::card_protobuf::DataType_descriptor();
}
template <> struct is_proto_enum< ::card_protobuf::OrignalSource> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::card_protobuf::OrignalSource>() {
  return ::card_protobuf::OrignalSource_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_commonprotocol_2eproto__INCLUDED
