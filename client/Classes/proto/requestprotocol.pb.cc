// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: requestprotocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "requestprotocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace card_protobuf {

namespace {

const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_requestprotocol_2eproto() {
  protobuf_AddDesc_requestprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "requestprotocol.proto");
  GOOGLE_CHECK(file != NULL);
  Request_descriptor_ = file->message_type(0);
  static const int Request_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, arg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, domid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, no_cache_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, charset_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_requestprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_requestprotocol_2eproto() {
  delete Request::default_instance_;
  delete Request_reflection_;
}

void protobuf_AddDesc_requestprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::card_protobuf::protobuf_AddDesc_commonprotocol_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025requestprotocol.proto\022\rcard_protobuf\032\024"
    "commonprotocol.proto\"~\n\007Request\022\r\n\005msgid"
    "\030\001 \001(\005\022\013\n\003arg\030\002 \001(\t\022\r\n\005domId\030\003 \001(\003\022\020\n\010no"
    "_cache\030\004 \001(\010\022%\n\004type\030\005 \001(\0162\027.card_protob"
    "uf.DataType\022\017\n\007charset\030\006 \001(\tB\002H\001", 192);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "requestprotocol.proto", &protobuf_RegisterTypes);
  Request::default_instance_ = new Request();
  Request::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_requestprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_requestprotocol_2eproto {
  StaticDescriptorInitializer_requestprotocol_2eproto() {
    protobuf_AddDesc_requestprotocol_2eproto();
  }
} static_descriptor_initializer_requestprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Request::kMsgidFieldNumber;
const int Request::kArgFieldNumber;
const int Request::kDomIdFieldNumber;
const int Request::kNoCacheFieldNumber;
const int Request::kTypeFieldNumber;
const int Request::kCharsetFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:card_protobuf.Request)
}

void Request::InitAsDefaultInstance() {
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:card_protobuf.Request)
}

void Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 0;
  arg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domid_ = GOOGLE_LONGLONG(0);
  no_cache_ = false;
  type_ = 0;
  charset_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:card_protobuf.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (arg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete arg_;
  }
  if (charset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charset_;
  }
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_requestprotocol_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Request*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(msgid_, domid_);
    if (has_arg()) {
      if (arg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        arg_->clear();
      }
    }
    type_ = 0;
    if (has_charset()) {
      if (charset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charset_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:card_protobuf.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 msgid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_arg;
        break;
      }

      // optional string arg = 2;
      case 2: {
        if (tag == 18) {
         parse_arg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->arg().data(), this->arg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "arg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_domId;
        break;
      }

      // optional int64 domId = 3;
      case 3: {
        if (tag == 24) {
         parse_domId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &domid_)));
          set_has_domid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_no_cache;
        break;
      }

      // optional bool no_cache = 4;
      case 4: {
        if (tag == 32) {
         parse_no_cache:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_cache_)));
          set_has_no_cache();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .card_protobuf.DataType type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::card_protobuf::DataType_IsValid(value)) {
            set_type(static_cast< ::card_protobuf::DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_charset;
        break;
      }

      // optional string charset = 6;
      case 6: {
        if (tag == 50) {
         parse_charset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charset().data(), this->charset().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charset");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:card_protobuf.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:card_protobuf.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:card_protobuf.Request)
  // optional int32 msgid = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }

  // optional string arg = 2;
  if (has_arg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arg().data(), this->arg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "arg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->arg(), output);
  }

  // optional int64 domId = 3;
  if (has_domid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->domid(), output);
  }

  // optional bool no_cache = 4;
  if (has_no_cache()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->no_cache(), output);
  }

  // optional .card_protobuf.DataType type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional string charset = 6;
  if (has_charset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charset().data(), this->charset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->charset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:card_protobuf.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:card_protobuf.Request)
  // optional int32 msgid = 1;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }

  // optional string arg = 2;
  if (has_arg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arg().data(), this->arg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "arg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->arg(), target);
  }

  // optional int64 domId = 3;
  if (has_domid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->domid(), target);
  }

  // optional bool no_cache = 4;
  if (has_no_cache()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->no_cache(), target);
  }

  // optional .card_protobuf.DataType type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional string charset = 6;
  if (has_charset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charset().data(), this->charset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->charset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:card_protobuf.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 msgid = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }

    // optional string arg = 2;
    if (has_arg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->arg());
    }

    // optional int64 domId = 3;
    if (has_domid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->domid());
    }

    // optional bool no_cache = 4;
    if (has_no_cache()) {
      total_size += 1 + 1;
    }

    // optional .card_protobuf.DataType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string charset = 6;
    if (has_charset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_arg()) {
      set_arg(from.arg());
    }
    if (from.has_domid()) {
      set_domid(from.domid());
    }
    if (from.has_no_cache()) {
      set_no_cache(from.no_cache());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_charset()) {
      set_charset(from.charset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(arg_, other->arg_);
    std::swap(domid_, other->domid_);
    std::swap(no_cache_, other->no_cache_);
    std::swap(type_, other->type_);
    std::swap(charset_, other->charset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace card_protobuf

// @@protoc_insertion_point(global_scope)
