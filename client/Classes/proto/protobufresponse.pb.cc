// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobufresponse.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protobufresponse.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace card_protobuf {

namespace {

const ::google::protobuf::Descriptor* ProtobufColumnInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtobufColumnInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProtobufColumnInfo_ColumnType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RowValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RowValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* RowValue_ColumnValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RowValue_ColumnValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtobufResponseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtobufResponseData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protobufresponse_2eproto() {
  protobuf_AddDesc_protobufresponse_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protobufresponse.proto");
  GOOGLE_CHECK(file != NULL);
  ProtobufColumnInfo_descriptor_ = file->message_type(0);
  static const int ProtobufColumnInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufColumnInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufColumnInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufColumnInfo, precision_),
  };
  ProtobufColumnInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtobufColumnInfo_descriptor_,
      ProtobufColumnInfo::default_instance_,
      ProtobufColumnInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufColumnInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufColumnInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtobufColumnInfo));
  ProtobufColumnInfo_ColumnType_descriptor_ = ProtobufColumnInfo_descriptor_->enum_type(0);
  RowValue_descriptor_ = file->message_type(1);
  static const int RowValue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowValue, columnvalue_),
  };
  RowValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RowValue_descriptor_,
      RowValue::default_instance_,
      RowValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RowValue));
  RowValue_ColumnValue_descriptor_ = RowValue_descriptor_->nested_type(0);
  static const int RowValue_ColumnValue_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowValue_ColumnValue, int32value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowValue_ColumnValue, int64value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowValue_ColumnValue, doublevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowValue_ColumnValue, stringvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowValue_ColumnValue, bytesvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowValue_ColumnValue, sint32value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowValue_ColumnValue, sint64value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowValue_ColumnValue, fixed32value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowValue_ColumnValue, fixed64value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowValue_ColumnValue, boolvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowValue_ColumnValue, floatvalue_),
  };
  RowValue_ColumnValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RowValue_ColumnValue_descriptor_,
      RowValue_ColumnValue::default_instance_,
      RowValue_ColumnValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowValue_ColumnValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowValue_ColumnValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RowValue_ColumnValue));
  ProtobufResponseData_descriptor_ = file->message_type(2);
  static const int ProtobufResponseData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufResponseData, columninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufResponseData, rowvalue_),
  };
  ProtobufResponseData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtobufResponseData_descriptor_,
      ProtobufResponseData::default_instance_,
      ProtobufResponseData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufResponseData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufResponseData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtobufResponseData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protobufresponse_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtobufColumnInfo_descriptor_, &ProtobufColumnInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RowValue_descriptor_, &RowValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RowValue_ColumnValue_descriptor_, &RowValue_ColumnValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtobufResponseData_descriptor_, &ProtobufResponseData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protobufresponse_2eproto() {
  delete ProtobufColumnInfo::default_instance_;
  delete ProtobufColumnInfo_reflection_;
  delete RowValue::default_instance_;
  delete RowValue_reflection_;
  delete RowValue_ColumnValue::default_instance_;
  delete RowValue_ColumnValue_reflection_;
  delete ProtobufResponseData::default_instance_;
  delete ProtobufResponseData_reflection_;
}

void protobuf_AddDesc_protobufresponse_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026protobufresponse.proto\022\rcard_protobuf\""
    "\212\002\n\022ProtobufColumnInfo\022\014\n\004name\030\001 \002(\t\022:\n\004"
    "type\030\002 \002(\0162,.card_protobuf.ProtobufColum"
    "nInfo.ColumnType\022\021\n\tprecision\030\003 \001(\005\"\226\001\n\n"
    "ColumnType\022\t\n\005INT32\020\000\022\t\n\005INT64\020\001\022\n\n\006DOUB"
    "LE\020\002\022\n\n\006STRING\020\003\022\007\n\003RAW\020\004\022\n\n\006SINT32\020\005\022\n\n"
    "\006SINT64\020\006\022\013\n\007FIXED32\020\007\022\013\n\007FIXED64\020\010\022\010\n\004B"
    "OOL\020\t\022\t\n\005FLOAT\020\n\022\n\n\006UNKNOW\020\013\"\267\002\n\010RowValu"
    "e\0228\n\013columnValue\030\001 \003(\0132#.card_protobuf.R"
    "owValue.ColumnValue\032\360\001\n\013ColumnValue\022\022\n\ni"
    "nt32Value\030\001 \001(\005\022\022\n\nint64Value\030\002 \001(\003\022\023\n\013d"
    "oubleValue\030\003 \001(\001\022\023\n\013stringValue\030\004 \001(\t\022\022\n"
    "\nbytesValue\030\005 \001(\014\022\023\n\013sint32Value\030\006 \001(\021\022\023"
    "\n\013sint64Value\030\007 \001(\022\022\024\n\014fixed32Value\030\010 \001("
    "\007\022\024\n\014fixed64Value\030\t \001(\006\022\021\n\tboolValue\030\n \001"
    "(\010\022\022\n\nfloatValue\030\013 \001(\002\"x\n\024ProtobufRespon"
    "seData\0225\n\ncolumnInfo\030\001 \003(\0132!.card_protob"
    "uf.ProtobufColumnInfo\022)\n\010rowValue\030\002 \003(\0132"
    "\027.card_protobuf.RowValueB\002H\001", 748);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protobufresponse.proto", &protobuf_RegisterTypes);
  ProtobufColumnInfo::default_instance_ = new ProtobufColumnInfo();
  RowValue::default_instance_ = new RowValue();
  RowValue_ColumnValue::default_instance_ = new RowValue_ColumnValue();
  ProtobufResponseData::default_instance_ = new ProtobufResponseData();
  ProtobufColumnInfo::default_instance_->InitAsDefaultInstance();
  RowValue::default_instance_->InitAsDefaultInstance();
  RowValue_ColumnValue::default_instance_->InitAsDefaultInstance();
  ProtobufResponseData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protobufresponse_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protobufresponse_2eproto {
  StaticDescriptorInitializer_protobufresponse_2eproto() {
    protobuf_AddDesc_protobufresponse_2eproto();
  }
} static_descriptor_initializer_protobufresponse_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ProtobufColumnInfo_ColumnType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtobufColumnInfo_ColumnType_descriptor_;
}
bool ProtobufColumnInfo_ColumnType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProtobufColumnInfo_ColumnType ProtobufColumnInfo::INT32;
const ProtobufColumnInfo_ColumnType ProtobufColumnInfo::INT64;
const ProtobufColumnInfo_ColumnType ProtobufColumnInfo::DOUBLE;
const ProtobufColumnInfo_ColumnType ProtobufColumnInfo::STRING;
const ProtobufColumnInfo_ColumnType ProtobufColumnInfo::RAW;
const ProtobufColumnInfo_ColumnType ProtobufColumnInfo::SINT32;
const ProtobufColumnInfo_ColumnType ProtobufColumnInfo::SINT64;
const ProtobufColumnInfo_ColumnType ProtobufColumnInfo::FIXED32;
const ProtobufColumnInfo_ColumnType ProtobufColumnInfo::FIXED64;
const ProtobufColumnInfo_ColumnType ProtobufColumnInfo::BOOL;
const ProtobufColumnInfo_ColumnType ProtobufColumnInfo::FLOAT;
const ProtobufColumnInfo_ColumnType ProtobufColumnInfo::UNKNOW;
const ProtobufColumnInfo_ColumnType ProtobufColumnInfo::ColumnType_MIN;
const ProtobufColumnInfo_ColumnType ProtobufColumnInfo::ColumnType_MAX;
const int ProtobufColumnInfo::ColumnType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProtobufColumnInfo::kNameFieldNumber;
const int ProtobufColumnInfo::kTypeFieldNumber;
const int ProtobufColumnInfo::kPrecisionFieldNumber;
#endif  // !_MSC_VER

ProtobufColumnInfo::ProtobufColumnInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:card_protobuf.ProtobufColumnInfo)
}

void ProtobufColumnInfo::InitAsDefaultInstance() {
}

ProtobufColumnInfo::ProtobufColumnInfo(const ProtobufColumnInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:card_protobuf.ProtobufColumnInfo)
}

void ProtobufColumnInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  precision_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtobufColumnInfo::~ProtobufColumnInfo() {
  // @@protoc_insertion_point(destructor:card_protobuf.ProtobufColumnInfo)
  SharedDtor();
}

void ProtobufColumnInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ProtobufColumnInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtobufColumnInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtobufColumnInfo_descriptor_;
}

const ProtobufColumnInfo& ProtobufColumnInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobufresponse_2eproto();
  return *default_instance_;
}

ProtobufColumnInfo* ProtobufColumnInfo::default_instance_ = NULL;

ProtobufColumnInfo* ProtobufColumnInfo::New() const {
  return new ProtobufColumnInfo;
}

void ProtobufColumnInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProtobufColumnInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(type_, precision_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtobufColumnInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:card_protobuf.ProtobufColumnInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .card_protobuf.ProtobufColumnInfo.ColumnType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::card_protobuf::ProtobufColumnInfo_ColumnType_IsValid(value)) {
            set_type(static_cast< ::card_protobuf::ProtobufColumnInfo_ColumnType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_precision;
        break;
      }

      // optional int32 precision = 3;
      case 3: {
        if (tag == 24) {
         parse_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
          set_has_precision();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:card_protobuf.ProtobufColumnInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:card_protobuf.ProtobufColumnInfo)
  return false;
#undef DO_
}

void ProtobufColumnInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:card_protobuf.ProtobufColumnInfo)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .card_protobuf.ProtobufColumnInfo.ColumnType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int32 precision = 3;
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->precision(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:card_protobuf.ProtobufColumnInfo)
}

::google::protobuf::uint8* ProtobufColumnInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:card_protobuf.ProtobufColumnInfo)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .card_protobuf.ProtobufColumnInfo.ColumnType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional int32 precision = 3;
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->precision(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:card_protobuf.ProtobufColumnInfo)
  return target;
}

int ProtobufColumnInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .card_protobuf.ProtobufColumnInfo.ColumnType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 precision = 3;
    if (has_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->precision());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtobufColumnInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtobufColumnInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtobufColumnInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtobufColumnInfo::MergeFrom(const ProtobufColumnInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_precision()) {
      set_precision(from.precision());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtobufColumnInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtobufColumnInfo::CopyFrom(const ProtobufColumnInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufColumnInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ProtobufColumnInfo::Swap(ProtobufColumnInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(precision_, other->precision_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtobufColumnInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtobufColumnInfo_descriptor_;
  metadata.reflection = ProtobufColumnInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RowValue_ColumnValue::kInt32ValueFieldNumber;
const int RowValue_ColumnValue::kInt64ValueFieldNumber;
const int RowValue_ColumnValue::kDoubleValueFieldNumber;
const int RowValue_ColumnValue::kStringValueFieldNumber;
const int RowValue_ColumnValue::kBytesValueFieldNumber;
const int RowValue_ColumnValue::kSint32ValueFieldNumber;
const int RowValue_ColumnValue::kSint64ValueFieldNumber;
const int RowValue_ColumnValue::kFixed32ValueFieldNumber;
const int RowValue_ColumnValue::kFixed64ValueFieldNumber;
const int RowValue_ColumnValue::kBoolValueFieldNumber;
const int RowValue_ColumnValue::kFloatValueFieldNumber;
#endif  // !_MSC_VER

RowValue_ColumnValue::RowValue_ColumnValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:card_protobuf.RowValue.ColumnValue)
}

void RowValue_ColumnValue::InitAsDefaultInstance() {
}

RowValue_ColumnValue::RowValue_ColumnValue(const RowValue_ColumnValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:card_protobuf.RowValue.ColumnValue)
}

void RowValue_ColumnValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  int32value_ = 0;
  int64value_ = GOOGLE_LONGLONG(0);
  doublevalue_ = 0;
  stringvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytesvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sint32value_ = 0;
  sint64value_ = GOOGLE_LONGLONG(0);
  fixed32value_ = 0u;
  fixed64value_ = GOOGLE_ULONGLONG(0);
  boolvalue_ = false;
  floatvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RowValue_ColumnValue::~RowValue_ColumnValue() {
  // @@protoc_insertion_point(destructor:card_protobuf.RowValue.ColumnValue)
  SharedDtor();
}

void RowValue_ColumnValue::SharedDtor() {
  if (stringvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stringvalue_;
  }
  if (bytesvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bytesvalue_;
  }
  if (this != default_instance_) {
  }
}

void RowValue_ColumnValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RowValue_ColumnValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RowValue_ColumnValue_descriptor_;
}

const RowValue_ColumnValue& RowValue_ColumnValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobufresponse_2eproto();
  return *default_instance_;
}

RowValue_ColumnValue* RowValue_ColumnValue::default_instance_ = NULL;

RowValue_ColumnValue* RowValue_ColumnValue::New() const {
  return new RowValue_ColumnValue;
}

void RowValue_ColumnValue::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RowValue_ColumnValue*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(int64value_, sint32value_);
    if (has_stringvalue()) {
      if (stringvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stringvalue_->clear();
      }
    }
    if (has_bytesvalue()) {
      if (bytesvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bytesvalue_->clear();
      }
    }
    sint64value_ = GOOGLE_LONGLONG(0);
    fixed32value_ = 0u;
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(boolvalue_, floatvalue_);
    fixed64value_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RowValue_ColumnValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:card_protobuf.RowValue.ColumnValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 int32Value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int32value_)));
          set_has_int32value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_int64Value;
        break;
      }

      // optional int64 int64Value = 2;
      case 2: {
        if (tag == 16) {
         parse_int64Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int64value_)));
          set_has_int64value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_doubleValue;
        break;
      }

      // optional double doubleValue = 3;
      case 3: {
        if (tag == 25) {
         parse_doubleValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &doublevalue_)));
          set_has_doublevalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stringValue;
        break;
      }

      // optional string stringValue = 4;
      case 4: {
        if (tag == 34) {
         parse_stringValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stringvalue().data(), this->stringvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stringvalue");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bytesValue;
        break;
      }

      // optional bytes bytesValue = 5;
      case 5: {
        if (tag == 42) {
         parse_bytesValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytesvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sint32Value;
        break;
      }

      // optional sint32 sint32Value = 6;
      case 6: {
        if (tag == 48) {
         parse_sint32Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sint32value_)));
          set_has_sint32value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sint64Value;
        break;
      }

      // optional sint64 sint64Value = 7;
      case 7: {
        if (tag == 56) {
         parse_sint64Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sint64value_)));
          set_has_sint64value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_fixed32Value;
        break;
      }

      // optional fixed32 fixed32Value = 8;
      case 8: {
        if (tag == 69) {
         parse_fixed32Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fixed32value_)));
          set_has_fixed32value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_fixed64Value;
        break;
      }

      // optional fixed64 fixed64Value = 9;
      case 9: {
        if (tag == 73) {
         parse_fixed64Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &fixed64value_)));
          set_has_fixed64value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_boolValue;
        break;
      }

      // optional bool boolValue = 10;
      case 10: {
        if (tag == 80) {
         parse_boolValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolvalue_)));
          set_has_boolvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_floatValue;
        break;
      }

      // optional float floatValue = 11;
      case 11: {
        if (tag == 93) {
         parse_floatValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &floatvalue_)));
          set_has_floatvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:card_protobuf.RowValue.ColumnValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:card_protobuf.RowValue.ColumnValue)
  return false;
#undef DO_
}

void RowValue_ColumnValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:card_protobuf.RowValue.ColumnValue)
  // optional int32 int32Value = 1;
  if (has_int32value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->int32value(), output);
  }

  // optional int64 int64Value = 2;
  if (has_int64value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->int64value(), output);
  }

  // optional double doubleValue = 3;
  if (has_doublevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->doublevalue(), output);
  }

  // optional string stringValue = 4;
  if (has_stringvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stringvalue().data(), this->stringvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stringvalue");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->stringvalue(), output);
  }

  // optional bytes bytesValue = 5;
  if (has_bytesvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->bytesvalue(), output);
  }

  // optional sint32 sint32Value = 6;
  if (has_sint32value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->sint32value(), output);
  }

  // optional sint64 sint64Value = 7;
  if (has_sint64value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(7, this->sint64value(), output);
  }

  // optional fixed32 fixed32Value = 8;
  if (has_fixed32value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->fixed32value(), output);
  }

  // optional fixed64 fixed64Value = 9;
  if (has_fixed64value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(9, this->fixed64value(), output);
  }

  // optional bool boolValue = 10;
  if (has_boolvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->boolvalue(), output);
  }

  // optional float floatValue = 11;
  if (has_floatvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->floatvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:card_protobuf.RowValue.ColumnValue)
}

::google::protobuf::uint8* RowValue_ColumnValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:card_protobuf.RowValue.ColumnValue)
  // optional int32 int32Value = 1;
  if (has_int32value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->int32value(), target);
  }

  // optional int64 int64Value = 2;
  if (has_int64value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->int64value(), target);
  }

  // optional double doubleValue = 3;
  if (has_doublevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->doublevalue(), target);
  }

  // optional string stringValue = 4;
  if (has_stringvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stringvalue().data(), this->stringvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stringvalue");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->stringvalue(), target);
  }

  // optional bytes bytesValue = 5;
  if (has_bytesvalue()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->bytesvalue(), target);
  }

  // optional sint32 sint32Value = 6;
  if (has_sint32value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->sint32value(), target);
  }

  // optional sint64 sint64Value = 7;
  if (has_sint64value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(7, this->sint64value(), target);
  }

  // optional fixed32 fixed32Value = 8;
  if (has_fixed32value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->fixed32value(), target);
  }

  // optional fixed64 fixed64Value = 9;
  if (has_fixed64value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(9, this->fixed64value(), target);
  }

  // optional bool boolValue = 10;
  if (has_boolvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->boolvalue(), target);
  }

  // optional float floatValue = 11;
  if (has_floatvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->floatvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:card_protobuf.RowValue.ColumnValue)
  return target;
}

int RowValue_ColumnValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 int32Value = 1;
    if (has_int32value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int32value());
    }

    // optional int64 int64Value = 2;
    if (has_int64value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int64value());
    }

    // optional double doubleValue = 3;
    if (has_doublevalue()) {
      total_size += 1 + 8;
    }

    // optional string stringValue = 4;
    if (has_stringvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringvalue());
    }

    // optional bytes bytesValue = 5;
    if (has_bytesvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytesvalue());
    }

    // optional sint32 sint32Value = 6;
    if (has_sint32value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sint32value());
    }

    // optional sint64 sint64Value = 7;
    if (has_sint64value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->sint64value());
    }

    // optional fixed32 fixed32Value = 8;
    if (has_fixed32value()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional fixed64 fixed64Value = 9;
    if (has_fixed64value()) {
      total_size += 1 + 8;
    }

    // optional bool boolValue = 10;
    if (has_boolvalue()) {
      total_size += 1 + 1;
    }

    // optional float floatValue = 11;
    if (has_floatvalue()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RowValue_ColumnValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RowValue_ColumnValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RowValue_ColumnValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RowValue_ColumnValue::MergeFrom(const RowValue_ColumnValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_int32value()) {
      set_int32value(from.int32value());
    }
    if (from.has_int64value()) {
      set_int64value(from.int64value());
    }
    if (from.has_doublevalue()) {
      set_doublevalue(from.doublevalue());
    }
    if (from.has_stringvalue()) {
      set_stringvalue(from.stringvalue());
    }
    if (from.has_bytesvalue()) {
      set_bytesvalue(from.bytesvalue());
    }
    if (from.has_sint32value()) {
      set_sint32value(from.sint32value());
    }
    if (from.has_sint64value()) {
      set_sint64value(from.sint64value());
    }
    if (from.has_fixed32value()) {
      set_fixed32value(from.fixed32value());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fixed64value()) {
      set_fixed64value(from.fixed64value());
    }
    if (from.has_boolvalue()) {
      set_boolvalue(from.boolvalue());
    }
    if (from.has_floatvalue()) {
      set_floatvalue(from.floatvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RowValue_ColumnValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowValue_ColumnValue::CopyFrom(const RowValue_ColumnValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowValue_ColumnValue::IsInitialized() const {

  return true;
}

void RowValue_ColumnValue::Swap(RowValue_ColumnValue* other) {
  if (other != this) {
    std::swap(int32value_, other->int32value_);
    std::swap(int64value_, other->int64value_);
    std::swap(doublevalue_, other->doublevalue_);
    std::swap(stringvalue_, other->stringvalue_);
    std::swap(bytesvalue_, other->bytesvalue_);
    std::swap(sint32value_, other->sint32value_);
    std::swap(sint64value_, other->sint64value_);
    std::swap(fixed32value_, other->fixed32value_);
    std::swap(fixed64value_, other->fixed64value_);
    std::swap(boolvalue_, other->boolvalue_);
    std::swap(floatvalue_, other->floatvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RowValue_ColumnValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RowValue_ColumnValue_descriptor_;
  metadata.reflection = RowValue_ColumnValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RowValue::kColumnValueFieldNumber;
#endif  // !_MSC_VER

RowValue::RowValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:card_protobuf.RowValue)
}

void RowValue::InitAsDefaultInstance() {
}

RowValue::RowValue(const RowValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:card_protobuf.RowValue)
}

void RowValue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RowValue::~RowValue() {
  // @@protoc_insertion_point(destructor:card_protobuf.RowValue)
  SharedDtor();
}

void RowValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RowValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RowValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RowValue_descriptor_;
}

const RowValue& RowValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobufresponse_2eproto();
  return *default_instance_;
}

RowValue* RowValue::default_instance_ = NULL;

RowValue* RowValue::New() const {
  return new RowValue;
}

void RowValue::Clear() {
  columnvalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RowValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:card_protobuf.RowValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .card_protobuf.RowValue.ColumnValue columnValue = 1;
      case 1: {
        if (tag == 10) {
         parse_columnValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columnvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_columnValue;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:card_protobuf.RowValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:card_protobuf.RowValue)
  return false;
#undef DO_
}

void RowValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:card_protobuf.RowValue)
  // repeated .card_protobuf.RowValue.ColumnValue columnValue = 1;
  for (int i = 0; i < this->columnvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->columnvalue(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:card_protobuf.RowValue)
}

::google::protobuf::uint8* RowValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:card_protobuf.RowValue)
  // repeated .card_protobuf.RowValue.ColumnValue columnValue = 1;
  for (int i = 0; i < this->columnvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->columnvalue(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:card_protobuf.RowValue)
  return target;
}

int RowValue::ByteSize() const {
  int total_size = 0;

  // repeated .card_protobuf.RowValue.ColumnValue columnValue = 1;
  total_size += 1 * this->columnvalue_size();
  for (int i = 0; i < this->columnvalue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columnvalue(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RowValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RowValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RowValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RowValue::MergeFrom(const RowValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  columnvalue_.MergeFrom(from.columnvalue_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RowValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowValue::CopyFrom(const RowValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowValue::IsInitialized() const {

  return true;
}

void RowValue::Swap(RowValue* other) {
  if (other != this) {
    columnvalue_.Swap(&other->columnvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RowValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RowValue_descriptor_;
  metadata.reflection = RowValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtobufResponseData::kColumnInfoFieldNumber;
const int ProtobufResponseData::kRowValueFieldNumber;
#endif  // !_MSC_VER

ProtobufResponseData::ProtobufResponseData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:card_protobuf.ProtobufResponseData)
}

void ProtobufResponseData::InitAsDefaultInstance() {
}

ProtobufResponseData::ProtobufResponseData(const ProtobufResponseData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:card_protobuf.ProtobufResponseData)
}

void ProtobufResponseData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtobufResponseData::~ProtobufResponseData() {
  // @@protoc_insertion_point(destructor:card_protobuf.ProtobufResponseData)
  SharedDtor();
}

void ProtobufResponseData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtobufResponseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtobufResponseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtobufResponseData_descriptor_;
}

const ProtobufResponseData& ProtobufResponseData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobufresponse_2eproto();
  return *default_instance_;
}

ProtobufResponseData* ProtobufResponseData::default_instance_ = NULL;

ProtobufResponseData* ProtobufResponseData::New() const {
  return new ProtobufResponseData;
}

void ProtobufResponseData::Clear() {
  columninfo_.Clear();
  rowvalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtobufResponseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:card_protobuf.ProtobufResponseData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .card_protobuf.ProtobufColumnInfo columnInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_columnInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columninfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_columnInfo;
        if (input->ExpectTag(18)) goto parse_rowValue;
        break;
      }

      // repeated .card_protobuf.RowValue rowValue = 2;
      case 2: {
        if (tag == 18) {
         parse_rowValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rowvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rowValue;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:card_protobuf.ProtobufResponseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:card_protobuf.ProtobufResponseData)
  return false;
#undef DO_
}

void ProtobufResponseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:card_protobuf.ProtobufResponseData)
  // repeated .card_protobuf.ProtobufColumnInfo columnInfo = 1;
  for (int i = 0; i < this->columninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->columninfo(i), output);
  }

  // repeated .card_protobuf.RowValue rowValue = 2;
  for (int i = 0; i < this->rowvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rowvalue(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:card_protobuf.ProtobufResponseData)
}

::google::protobuf::uint8* ProtobufResponseData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:card_protobuf.ProtobufResponseData)
  // repeated .card_protobuf.ProtobufColumnInfo columnInfo = 1;
  for (int i = 0; i < this->columninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->columninfo(i), target);
  }

  // repeated .card_protobuf.RowValue rowValue = 2;
  for (int i = 0; i < this->rowvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rowvalue(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:card_protobuf.ProtobufResponseData)
  return target;
}

int ProtobufResponseData::ByteSize() const {
  int total_size = 0;

  // repeated .card_protobuf.ProtobufColumnInfo columnInfo = 1;
  total_size += 1 * this->columninfo_size();
  for (int i = 0; i < this->columninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columninfo(i));
  }

  // repeated .card_protobuf.RowValue rowValue = 2;
  total_size += 1 * this->rowvalue_size();
  for (int i = 0; i < this->rowvalue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rowvalue(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtobufResponseData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtobufResponseData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtobufResponseData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtobufResponseData::MergeFrom(const ProtobufResponseData& from) {
  GOOGLE_CHECK_NE(&from, this);
  columninfo_.MergeFrom(from.columninfo_);
  rowvalue_.MergeFrom(from.rowvalue_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtobufResponseData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtobufResponseData::CopyFrom(const ProtobufResponseData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufResponseData::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->columninfo())) return false;
  return true;
}

void ProtobufResponseData::Swap(ProtobufResponseData* other) {
  if (other != this) {
    columninfo_.Swap(&other->columninfo_);
    rowvalue_.Swap(&other->rowvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtobufResponseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtobufResponseData_descriptor_;
  metadata.reflection = ProtobufResponseData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace card_protobuf

// @@protoc_insertion_point(global_scope)
