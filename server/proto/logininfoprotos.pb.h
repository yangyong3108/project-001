// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logininfoprotos.proto

#ifndef PROTOBUF_logininfoprotos_2eproto__INCLUDED
#define PROTOBUF_logininfoprotos_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace card_protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_logininfoprotos_2eproto();
void protobuf_AssignDesc_logininfoprotos_2eproto();
void protobuf_ShutdownFile_logininfoprotos_2eproto();

class LoginInfo;

// ===================================================================

class LoginInfo : public ::google::protobuf::Message {
 public:
  LoginInfo();
  virtual ~LoginInfo();

  LoginInfo(const LoginInfo& from);

  inline LoginInfo& operator=(const LoginInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginInfo& default_instance();

  void Swap(LoginInfo* other);

  // implements Message ----------------------------------------------

  LoginInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginInfo& from);
  void MergeFrom(const LoginInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required bytes password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const void* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // required uint64 computerid = 3;
  inline bool has_computerid() const;
  inline void clear_computerid();
  static const int kComputeridFieldNumber = 3;
  inline ::google::protobuf::uint64 computerid() const;
  inline void set_computerid(::google::protobuf::uint64 value);

  // required float client_version = 4;
  inline bool has_client_version() const;
  inline void clear_client_version();
  static const int kClientVersionFieldNumber = 4;
  inline float client_version() const;
  inline void set_client_version(float value);

  // @@protoc_insertion_point(class_scope:card_protobuf.LoginInfo)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_computerid();
  inline void clear_has_computerid();
  inline void set_has_client_version();
  inline void clear_has_client_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* username_;
  ::std::string* password_;
  ::google::protobuf::uint64 computerid_;
  float client_version_;
  friend void  protobuf_AddDesc_logininfoprotos_2eproto();
  friend void protobuf_AssignDesc_logininfoprotos_2eproto();
  friend void protobuf_ShutdownFile_logininfoprotos_2eproto();

  void InitAsDefaultInstance();
  static LoginInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// LoginInfo

// required string username = 1;
inline bool LoginInfo::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginInfo::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginInfo::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& LoginInfo::username() const {
  // @@protoc_insertion_point(field_get:card_protobuf.LoginInfo.username)
  return *username_;
}
inline void LoginInfo::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:card_protobuf.LoginInfo.username)
}
inline void LoginInfo::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:card_protobuf.LoginInfo.username)
}
inline void LoginInfo::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:card_protobuf.LoginInfo.username)
}
inline ::std::string* LoginInfo::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:card_protobuf.LoginInfo.username)
  return username_;
}
inline ::std::string* LoginInfo::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginInfo::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:card_protobuf.LoginInfo.username)
}

// required bytes password = 2;
inline bool LoginInfo::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginInfo::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginInfo::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginInfo::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& LoginInfo::password() const {
  // @@protoc_insertion_point(field_get:card_protobuf.LoginInfo.password)
  return *password_;
}
inline void LoginInfo::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:card_protobuf.LoginInfo.password)
}
inline void LoginInfo::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:card_protobuf.LoginInfo.password)
}
inline void LoginInfo::set_password(const void* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:card_protobuf.LoginInfo.password)
}
inline ::std::string* LoginInfo::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:card_protobuf.LoginInfo.password)
  return password_;
}
inline ::std::string* LoginInfo::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginInfo::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:card_protobuf.LoginInfo.password)
}

// required uint64 computerid = 3;
inline bool LoginInfo::has_computerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginInfo::set_has_computerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginInfo::clear_has_computerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginInfo::clear_computerid() {
  computerid_ = GOOGLE_ULONGLONG(0);
  clear_has_computerid();
}
inline ::google::protobuf::uint64 LoginInfo::computerid() const {
  // @@protoc_insertion_point(field_get:card_protobuf.LoginInfo.computerid)
  return computerid_;
}
inline void LoginInfo::set_computerid(::google::protobuf::uint64 value) {
  set_has_computerid();
  computerid_ = value;
  // @@protoc_insertion_point(field_set:card_protobuf.LoginInfo.computerid)
}

// required float client_version = 4;
inline bool LoginInfo::has_client_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginInfo::set_has_client_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginInfo::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginInfo::clear_client_version() {
  client_version_ = 0;
  clear_has_client_version();
}
inline float LoginInfo::client_version() const {
  // @@protoc_insertion_point(field_get:card_protobuf.LoginInfo.client_version)
  return client_version_;
}
inline void LoginInfo::set_client_version(float value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:card_protobuf.LoginInfo.client_version)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace card_protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_logininfoprotos_2eproto__INCLUDED
