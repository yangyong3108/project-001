// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commonprotocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "commonprotocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace card_protobuf {

namespace {

const ::google::protobuf::Descriptor* TopMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pipeline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pipeline_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SubMessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OrignalSource_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_commonprotocol_2eproto() {
  protobuf_AddDesc_commonprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "commonprotocol.proto");
  GOOGLE_CHECK(file != NULL);
  TopMessage_descriptor_ = file->message_type(0);
  static const int TopMessage_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopMessage, protocol_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopMessage, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopMessage, sub_msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopMessage, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopMessage, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopMessage, radom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopMessage, pipeline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopMessage, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopMessage, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopMessage, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopMessage, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopMessage, product_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopMessage, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopMessage, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopMessage, timestamp_),
  };
  TopMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopMessage_descriptor_,
      TopMessage::default_instance_,
      TopMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopMessage));
  Data_descriptor_ = file->message_type(1);
  static const int Data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, protocol_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, length_),
  };
  Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Data_descriptor_,
      Data::default_instance_,
      Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Data));
  Pipeline_descriptor_ = file->message_type(2);
  static const int Pipeline_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pipeline, pipe_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pipeline, end_flag_),
  };
  Pipeline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pipeline_descriptor_,
      Pipeline::default_instance_,
      Pipeline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pipeline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pipeline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pipeline));
  MessageType_descriptor_ = file->enum_type(0);
  SubMessageType_descriptor_ = file->enum_type(1);
  DataType_descriptor_ = file->enum_type(2);
  OrignalSource_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_commonprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopMessage_descriptor_, &TopMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Data_descriptor_, &Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pipeline_descriptor_, &Pipeline::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_commonprotocol_2eproto() {
  delete TopMessage::default_instance_;
  delete TopMessage_reflection_;
  delete Data::default_instance_;
  delete Data_reflection_;
  delete Pipeline::default_instance_;
  delete Pipeline_reflection_;
}

void protobuf_AddDesc_commonprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024commonprotocol.proto\022\rcard_protobuf\"\212\003"
    "\n\nTopMessage\022\030\n\020protocol_version\030\001 \001(\t\022,"
    "\n\010msg_type\030\002 \001(\0162\032.card_protobuf.Message"
    "Type\0223\n\014sub_msg_type\030\003 \001(\0162\035.card_protob"
    "uf.SubMessageType\022\022\n\nsession_id\030\004 \001(\t\022\013\n"
    "\003seq\030\005 \001(\003\022\r\n\005radom\030\006 \001(\t\022)\n\010pipeline\030\007 "
    "\001(\0132\027.card_protobuf.Pipeline\022\014\n\004data\030\010 \001"
    "(\014\022\014\n\004host\030\t \001(\t\022,\n\006source\030\n \001(\0162\034.card_"
    "protobuf.OrignalSource\022\021\n\tuser_name\030\013 \001("
    "\t\022\022\n\nproduct_id\030\014 \001(\005\022\017\n\007version\030\r \001(\002\022\017"
    "\n\007timeout\030\016 \001(\003\022\021\n\ttimestamp\030\017 \001(\003\"f\n\004Da"
    "ta\022\030\n\020protocol_version\030\001 \001(\t\022%\n\004type\030\002 \002"
    "(\0162\027.card_protobuf.DataType\022\r\n\005value\030\003 \002"
    "(\014\022\016\n\006length\030\004 \001(\003\"0\n\010Pipeline\022\022\n\npipe_i"
    "ndex\030\001 \002(\t\022\020\n\010end_flag\030\002 \001(\010*2\n\013MessageT"
    "ype\022\013\n\007REQUEST\020\000\022\014\n\010RESPONSE\020\001\022\010\n\004PUSH\020\002"
    "*\304\001\n\016SubMessageType\022\010\n\004INIT\020\000\022\n\n\006OPTION\020"
    "\001\022\t\n\005LOGIN\020\002\022\010\n\004POST\020\003\022\021\n\rSET_PARAMETER\020"
    "\004\022\n\n\006UPDATE\020\005\022\014\n\010REGISTER\020\006\022\t\n\005PAUSE\020\007\022\n"
    "\n\006CANCEL\020\010\022\t\n\005RESET\020\t\022\n\n\006LOGOFF\020\n\022\n\n\006REG"
    "_WD\020\013\022\010\n\004CHAT\020\014\022\n\n\006MARKET\020\r\022\n\n\006NOTIFY\020\016*"
    "\224\001\n\010DataType\022\010\n\004JSON\020\000\022\n\n\006BINARY\020\001\022\020\n\014MU"
    "LTI_BINARY\020\002\022\007\n\003FIX\020\003\022\010\n\004HTML\020\004\022\025\n\021MULTI"
    "_BINARY_NAME\020\005\022\014\n\010PROTOBUF\020\006\022\n\n\006STRING\020\007"
    "\022\010\n\004DYNA\020\010\022\t\n\005KLINE\020\t\022\007\n\003MIN\020\n*\225\001\n\rOrign"
    "alSource\022\014\n\010TERMINAL\020\000\022\007\n\003WEB\020\001\022\022\n\016ANDRI"
    "OD_MOBILE\020\002\022\016\n\nIOS_MOBILE\020\003\022\017\n\013ANDRIOD_P"
    "AD\020\004\022\013\n\007IOS_PAD\020\005\022\016\n\nBLACKBERRY\020\006\022\016\n\nWIN"
    "_MOBILE\020\007\022\013\n\007WIN_PAD\020\010B\002H\001", 1146);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "commonprotocol.proto", &protobuf_RegisterTypes);
  TopMessage::default_instance_ = new TopMessage();
  Data::default_instance_ = new Data();
  Pipeline::default_instance_ = new Pipeline();
  TopMessage::default_instance_->InitAsDefaultInstance();
  Data::default_instance_->InitAsDefaultInstance();
  Pipeline::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_commonprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_commonprotocol_2eproto {
  StaticDescriptorInitializer_commonprotocol_2eproto() {
    protobuf_AddDesc_commonprotocol_2eproto();
  }
} static_descriptor_initializer_commonprotocol_2eproto_;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SubMessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubMessageType_descriptor_;
}
bool SubMessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataType_descriptor_;
}
bool DataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrignalSource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrignalSource_descriptor_;
}
bool OrignalSource_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TopMessage::kProtocolVersionFieldNumber;
const int TopMessage::kMsgTypeFieldNumber;
const int TopMessage::kSubMsgTypeFieldNumber;
const int TopMessage::kSessionIdFieldNumber;
const int TopMessage::kSeqFieldNumber;
const int TopMessage::kRadomFieldNumber;
const int TopMessage::kPipelineFieldNumber;
const int TopMessage::kDataFieldNumber;
const int TopMessage::kHostFieldNumber;
const int TopMessage::kSourceFieldNumber;
const int TopMessage::kUserNameFieldNumber;
const int TopMessage::kProductIdFieldNumber;
const int TopMessage::kVersionFieldNumber;
const int TopMessage::kTimeoutFieldNumber;
const int TopMessage::kTimestampFieldNumber;
#endif  // !_MSC_VER

TopMessage::TopMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:card_protobuf.TopMessage)
}

void TopMessage::InitAsDefaultInstance() {
  pipeline_ = const_cast< ::card_protobuf::Pipeline*>(&::card_protobuf::Pipeline::default_instance());
}

TopMessage::TopMessage(const TopMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:card_protobuf.TopMessage)
}

void TopMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  protocol_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_type_ = 0;
  sub_msg_type_ = 0;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_ = GOOGLE_LONGLONG(0);
  radom_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pipeline_ = NULL;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_id_ = 0;
  version_ = 0;
  timeout_ = GOOGLE_LONGLONG(0);
  timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopMessage::~TopMessage() {
  // @@protoc_insertion_point(destructor:card_protobuf.TopMessage)
  SharedDtor();
}

void TopMessage::SharedDtor() {
  if (protocol_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete protocol_version_;
  }
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_id_;
  }
  if (radom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radom_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_;
  }
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (this != default_instance_) {
    delete pipeline_;
  }
}

void TopMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopMessage_descriptor_;
}

const TopMessage& TopMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonprotocol_2eproto();
  return *default_instance_;
}

TopMessage* TopMessage::default_instance_ = NULL;

TopMessage* TopMessage::New() const {
  return new TopMessage;
}

void TopMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TopMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(msg_type_, sub_msg_type_);
    if (has_protocol_version()) {
      if (protocol_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        protocol_version_->clear();
      }
    }
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_id_->clear();
      }
    }
    seq_ = GOOGLE_LONGLONG(0);
    if (has_radom()) {
      if (radom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        radom_->clear();
      }
    }
    if (has_pipeline()) {
      if (pipeline_ != NULL) pipeline_->::card_protobuf::Pipeline::Clear();
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(source_, version_);
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        host_->clear();
      }
    }
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:card_protobuf.TopMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string protocol_version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->protocol_version().data(), this->protocol_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msg_type;
        break;
      }

      // optional .card_protobuf.MessageType msg_type = 2;
      case 2: {
        if (tag == 16) {
         parse_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::card_protobuf::MessageType_IsValid(value)) {
            set_msg_type(static_cast< ::card_protobuf::MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sub_msg_type;
        break;
      }

      // optional .card_protobuf.SubMessageType sub_msg_type = 3;
      case 3: {
        if (tag == 24) {
         parse_sub_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::card_protobuf::SubMessageType_IsValid(value)) {
            set_sub_msg_type(static_cast< ::card_protobuf::SubMessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_session_id;
        break;
      }

      // optional string session_id = 4;
      case 4: {
        if (tag == 34) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "session_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_seq;
        break;
      }

      // optional int64 seq = 5;
      case 5: {
        if (tag == 40) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_radom;
        break;
      }

      // optional string radom = 6;
      case 6: {
        if (tag == 50) {
         parse_radom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radom().data(), this->radom().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "radom");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_pipeline;
        break;
      }

      // optional .card_protobuf.Pipeline pipeline = 7;
      case 7: {
        if (tag == 58) {
         parse_pipeline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pipeline()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_data;
        break;
      }

      // optional bytes data = 8;
      case 8: {
        if (tag == 66) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_host;
        break;
      }

      // optional string host = 9;
      case 9: {
        if (tag == 74) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_source;
        break;
      }

      // optional .card_protobuf.OrignalSource source = 10;
      case 10: {
        if (tag == 80) {
         parse_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::card_protobuf::OrignalSource_IsValid(value)) {
            set_source(static_cast< ::card_protobuf::OrignalSource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_user_name;
        break;
      }

      // optional string user_name = 11;
      case 11: {
        if (tag == 90) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_product_id;
        break;
      }

      // optional int32 product_id = 12;
      case 12: {
        if (tag == 96) {
         parse_product_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &product_id_)));
          set_has_product_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_version;
        break;
      }

      // optional float version = 13;
      case 13: {
        if (tag == 109) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_timeout;
        break;
      }

      // optional int64 timeout = 14;
      case 14: {
        if (tag == 112) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 15;
      case 15: {
        if (tag == 120) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:card_protobuf.TopMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:card_protobuf.TopMessage)
  return false;
#undef DO_
}

void TopMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:card_protobuf.TopMessage)
  // optional string protocol_version = 1;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->protocol_version().data(), this->protocol_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->protocol_version(), output);
  }

  // optional .card_protobuf.MessageType msg_type = 2;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msg_type(), output);
  }

  // optional .card_protobuf.SubMessageType sub_msg_type = 3;
  if (has_sub_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sub_msg_type(), output);
  }

  // optional string session_id = 4;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->session_id(), output);
  }

  // optional int64 seq = 5;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->seq(), output);
  }

  // optional string radom = 6;
  if (has_radom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radom().data(), this->radom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radom");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->radom(), output);
  }

  // optional .card_protobuf.Pipeline pipeline = 7;
  if (has_pipeline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pipeline(), output);
  }

  // optional bytes data = 8;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->data(), output);
  }

  // optional string host = 9;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->host(), output);
  }

  // optional .card_protobuf.OrignalSource source = 10;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->source(), output);
  }

  // optional string user_name = 11;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->user_name(), output);
  }

  // optional int32 product_id = 12;
  if (has_product_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->product_id(), output);
  }

  // optional float version = 13;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->version(), output);
  }

  // optional int64 timeout = 14;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->timeout(), output);
  }

  // optional int64 timestamp = 15;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:card_protobuf.TopMessage)
}

::google::protobuf::uint8* TopMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:card_protobuf.TopMessage)
  // optional string protocol_version = 1;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->protocol_version().data(), this->protocol_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->protocol_version(), target);
  }

  // optional .card_protobuf.MessageType msg_type = 2;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msg_type(), target);
  }

  // optional .card_protobuf.SubMessageType sub_msg_type = 3;
  if (has_sub_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->sub_msg_type(), target);
  }

  // optional string session_id = 4;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->session_id(), target);
  }

  // optional int64 seq = 5;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->seq(), target);
  }

  // optional string radom = 6;
  if (has_radom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radom().data(), this->radom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radom");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->radom(), target);
  }

  // optional .card_protobuf.Pipeline pipeline = 7;
  if (has_pipeline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pipeline(), target);
  }

  // optional bytes data = 8;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->data(), target);
  }

  // optional string host = 9;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->host(), target);
  }

  // optional .card_protobuf.OrignalSource source = 10;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->source(), target);
  }

  // optional string user_name = 11;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->user_name(), target);
  }

  // optional int32 product_id = 12;
  if (has_product_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->product_id(), target);
  }

  // optional float version = 13;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->version(), target);
  }

  // optional int64 timeout = 14;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->timeout(), target);
  }

  // optional int64 timestamp = 15;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:card_protobuf.TopMessage)
  return target;
}

int TopMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string protocol_version = 1;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocol_version());
    }

    // optional .card_protobuf.MessageType msg_type = 2;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // optional .card_protobuf.SubMessageType sub_msg_type = 3;
    if (has_sub_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sub_msg_type());
    }

    // optional string session_id = 4;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // optional int64 seq = 5;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->seq());
    }

    // optional string radom = 6;
    if (has_radom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radom());
    }

    // optional .card_protobuf.Pipeline pipeline = 7;
    if (has_pipeline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pipeline());
    }

    // optional bytes data = 8;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string host = 9;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional .card_protobuf.OrignalSource source = 10;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

    // optional string user_name = 11;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional int32 product_id = 12;
    if (has_product_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->product_id());
    }

    // optional float version = 13;
    if (has_version()) {
      total_size += 1 + 4;
    }

    // optional int64 timeout = 14;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timeout());
    }

    // optional int64 timestamp = 15;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopMessage::MergeFrom(const TopMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocol_version()) {
      set_protocol_version(from.protocol_version());
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_sub_msg_type()) {
      set_sub_msg_type(from.sub_msg_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_radom()) {
      set_radom(from.radom());
    }
    if (from.has_pipeline()) {
      mutable_pipeline()->::card_protobuf::Pipeline::MergeFrom(from.pipeline());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_product_id()) {
      set_product_id(from.product_id());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopMessage::CopyFrom(const TopMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopMessage::IsInitialized() const {

  if (has_pipeline()) {
    if (!this->pipeline().IsInitialized()) return false;
  }
  return true;
}

void TopMessage::Swap(TopMessage* other) {
  if (other != this) {
    std::swap(protocol_version_, other->protocol_version_);
    std::swap(msg_type_, other->msg_type_);
    std::swap(sub_msg_type_, other->sub_msg_type_);
    std::swap(session_id_, other->session_id_);
    std::swap(seq_, other->seq_);
    std::swap(radom_, other->radom_);
    std::swap(pipeline_, other->pipeline_);
    std::swap(data_, other->data_);
    std::swap(host_, other->host_);
    std::swap(source_, other->source_);
    std::swap(user_name_, other->user_name_);
    std::swap(product_id_, other->product_id_);
    std::swap(version_, other->version_);
    std::swap(timeout_, other->timeout_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopMessage_descriptor_;
  metadata.reflection = TopMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Data::kProtocolVersionFieldNumber;
const int Data::kTypeFieldNumber;
const int Data::kValueFieldNumber;
const int Data::kLengthFieldNumber;
#endif  // !_MSC_VER

Data::Data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:card_protobuf.Data)
}

void Data::InitAsDefaultInstance() {
}

Data::Data(const Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:card_protobuf.Data)
}

void Data::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  protocol_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  length_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:card_protobuf.Data)
  SharedDtor();
}

void Data::SharedDtor() {
  if (protocol_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete protocol_version_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_descriptor_;
}

const Data& Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonprotocol_2eproto();
  return *default_instance_;
}

Data* Data::default_instance_ = NULL;

Data* Data::New() const {
  return new Data;
}

void Data::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Data*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(length_, type_);
    if (has_protocol_version()) {
      if (protocol_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        protocol_version_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:card_protobuf.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string protocol_version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->protocol_version().data(), this->protocol_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .card_protobuf.DataType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::card_protobuf::DataType_IsValid(value)) {
            set_type(static_cast< ::card_protobuf::DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // required bytes value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_length;
        break;
      }

      // optional int64 length = 4;
      case 4: {
        if (tag == 32) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:card_protobuf.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:card_protobuf.Data)
  return false;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:card_protobuf.Data)
  // optional string protocol_version = 1;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->protocol_version().data(), this->protocol_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->protocol_version(), output);
  }

  // required .card_protobuf.DataType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required bytes value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  // optional int64 length = 4;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:card_protobuf.Data)
}

::google::protobuf::uint8* Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:card_protobuf.Data)
  // optional string protocol_version = 1;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->protocol_version().data(), this->protocol_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->protocol_version(), target);
  }

  // required .card_protobuf.DataType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required bytes value = 3;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  // optional int64 length = 4;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:card_protobuf.Data)
  return target;
}

int Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string protocol_version = 1;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocol_version());
    }

    // required .card_protobuf.DataType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required bytes value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // optional int64 length = 4;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocol_version()) {
      set_protocol_version(from.protocol_version());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void Data::Swap(Data* other) {
  if (other != this) {
    std::swap(protocol_version_, other->protocol_version_);
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Data_descriptor_;
  metadata.reflection = Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pipeline::kPipeIndexFieldNumber;
const int Pipeline::kEndFlagFieldNumber;
#endif  // !_MSC_VER

Pipeline::Pipeline()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:card_protobuf.Pipeline)
}

void Pipeline::InitAsDefaultInstance() {
}

Pipeline::Pipeline(const Pipeline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:card_protobuf.Pipeline)
}

void Pipeline::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pipe_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pipeline::~Pipeline() {
  // @@protoc_insertion_point(destructor:card_protobuf.Pipeline)
  SharedDtor();
}

void Pipeline::SharedDtor() {
  if (pipe_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pipe_index_;
  }
  if (this != default_instance_) {
  }
}

void Pipeline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pipeline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pipeline_descriptor_;
}

const Pipeline& Pipeline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonprotocol_2eproto();
  return *default_instance_;
}

Pipeline* Pipeline::default_instance_ = NULL;

Pipeline* Pipeline::New() const {
  return new Pipeline;
}

void Pipeline::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_pipe_index()) {
      if (pipe_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pipe_index_->clear();
      }
    }
    end_flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pipeline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:card_protobuf.Pipeline)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string pipe_index = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pipe_index()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pipe_index().data(), this->pipe_index().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pipe_index");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end_flag;
        break;
      }

      // optional bool end_flag = 2;
      case 2: {
        if (tag == 16) {
         parse_end_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &end_flag_)));
          set_has_end_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:card_protobuf.Pipeline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:card_protobuf.Pipeline)
  return false;
#undef DO_
}

void Pipeline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:card_protobuf.Pipeline)
  // required string pipe_index = 1;
  if (has_pipe_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pipe_index().data(), this->pipe_index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pipe_index");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pipe_index(), output);
  }

  // optional bool end_flag = 2;
  if (has_end_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->end_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:card_protobuf.Pipeline)
}

::google::protobuf::uint8* Pipeline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:card_protobuf.Pipeline)
  // required string pipe_index = 1;
  if (has_pipe_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pipe_index().data(), this->pipe_index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pipe_index");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pipe_index(), target);
  }

  // optional bool end_flag = 2;
  if (has_end_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->end_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:card_protobuf.Pipeline)
  return target;
}

int Pipeline::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string pipe_index = 1;
    if (has_pipe_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pipe_index());
    }

    // optional bool end_flag = 2;
    if (has_end_flag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pipeline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pipeline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pipeline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pipeline::MergeFrom(const Pipeline& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pipe_index()) {
      set_pipe_index(from.pipe_index());
    }
    if (from.has_end_flag()) {
      set_end_flag(from.end_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pipeline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pipeline::CopyFrom(const Pipeline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pipeline::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Pipeline::Swap(Pipeline* other) {
  if (other != this) {
    std::swap(pipe_index_, other->pipe_index_);
    std::swap(end_flag_, other->end_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pipeline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pipeline_descriptor_;
  metadata.reflection = Pipeline_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace card_protobuf

// @@protoc_insertion_point(global_scope)
